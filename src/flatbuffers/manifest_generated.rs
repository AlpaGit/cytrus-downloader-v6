// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum FileFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FileFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FileFb<'a> {
  type Inner = FileFb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FileFb<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 6;
  pub const VT_HASH: flatbuffers::VOffsetT = 8;
  pub const VT_CHUNKS: flatbuffers::VOffsetT = 10;
  pub const VT_EXECUTABLE: flatbuffers::VOffsetT = 12;
  pub const VT_SYMLINK: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FileFb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FileFbArgs<'args>
  ) -> flatbuffers::WIPOffset<FileFb<'bldr>> {
    let mut builder = FileFbBuilder::new(_fbb);
    builder.add_size_(args.size_);
    if let Some(x) = args.symlink { builder.add_symlink(x); }
    if let Some(x) = args.chunks { builder.add_chunks(x); }
    if let Some(x) = args.hash { builder.add_hash(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_executable(args.executable);
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FileFb::VT_NAME, None)}
  }
  #[inline]
  pub fn size_(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(FileFb::VT_SIZE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn hash(&self) -> Option<flatbuffers::Vector<'a, i8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(FileFb::VT_HASH, None)}
  }
  #[inline]
  pub fn chunks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb>>>>(FileFb::VT_CHUNKS, None)}
  }
  #[inline]
  pub fn executable(&self) -> bool {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<bool>(FileFb::VT_EXECUTABLE, Some(false)).unwrap()}
  }
  #[inline]
  pub fn symlink(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FileFb::VT_SYMLINK, None)}
  }
}

impl flatbuffers::Verifiable for FileFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<i64>("size_", Self::VT_SIZE_, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("hash", Self::VT_HASH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ChunkFb>>>>("chunks", Self::VT_CHUNKS, false)?
     .visit_field::<bool>("executable", Self::VT_EXECUTABLE, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("symlink", Self::VT_SYMLINK, false)?
     .finish();
    Ok(())
  }
}
pub struct FileFbArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub size_: i64,
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    pub chunks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb<'a>>>>>,
    pub executable: bool,
    pub symlink: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for FileFbArgs<'a> {
  #[inline]
  fn default() -> Self {
    FileFbArgs {
      name: None,
      size_: 0,
      hash: None,
      chunks: None,
      executable: false,
      symlink: None,
    }
  }
}

pub struct FileFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FileFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFb::VT_NAME, name);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: i64) {
    self.fbb_.push_slot::<i64>(FileFb::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFb::VT_HASH, hash);
  }
  #[inline]
  pub fn add_chunks(&mut self, chunks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ChunkFb<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFb::VT_CHUNKS, chunks);
  }
  #[inline]
  pub fn add_executable(&mut self, executable: bool) {
    self.fbb_.push_slot::<bool>(FileFb::VT_EXECUTABLE, executable, false);
  }
  #[inline]
  pub fn add_symlink(&mut self, symlink: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FileFb::VT_SYMLINK, symlink);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FileFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FileFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FileFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FileFb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FileFb");
      ds.field("name", &self.name());
      ds.field("size_", &self.size_());
      ds.field("hash", &self.hash());
      ds.field("chunks", &self.chunks());
      ds.field("executable", &self.executable());
      ds.field("symlink", &self.symlink());
      ds.finish()
  }
}
pub enum FragmentFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FragmentFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FragmentFb<'a> {
  type Inner = FragmentFb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FragmentFb<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_FILES: flatbuffers::VOffsetT = 6;
  pub const VT_BUNDLES: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FragmentFb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args FragmentFbArgs<'args>
  ) -> flatbuffers::WIPOffset<FragmentFb<'bldr>> {
    let mut builder = FragmentFbBuilder::new(_fbb);
    if let Some(x) = args.bundles { builder.add_bundles(x); }
    if let Some(x) = args.files { builder.add_files(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FragmentFb::VT_NAME, None)}
  }
  #[inline]
  pub fn files(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileFb<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileFb>>>>(FragmentFb::VT_FILES, None)}
  }
  #[inline]
  pub fn bundles(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BundleFb<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BundleFb>>>>(FragmentFb::VT_BUNDLES, None)}
  }
}

impl flatbuffers::Verifiable for FragmentFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FileFb>>>>("files", Self::VT_FILES, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<BundleFb>>>>("bundles", Self::VT_BUNDLES, false)?
     .finish();
    Ok(())
  }
}
pub struct FragmentFbArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub files: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FileFb<'a>>>>>,
    pub bundles: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<BundleFb<'a>>>>>,
}
impl<'a> Default for FragmentFbArgs<'a> {
  #[inline]
  fn default() -> Self {
    FragmentFbArgs {
      name: None,
      files: None,
      bundles: None,
    }
  }
}

pub struct FragmentFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> FragmentFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FragmentFb::VT_NAME, name);
  }
  #[inline]
  pub fn add_files(&mut self, files: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FileFb<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FragmentFb::VT_FILES, files);
  }
  #[inline]
  pub fn add_bundles(&mut self, bundles: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<BundleFb<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FragmentFb::VT_BUNDLES, bundles);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> FragmentFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    FragmentFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FragmentFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FragmentFb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FragmentFb");
      ds.field("name", &self.name());
      ds.field("files", &self.files());
      ds.field("bundles", &self.bundles());
      ds.finish()
  }
}
pub enum ChunkFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ChunkFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ChunkFb<'a> {
  type Inner = ChunkFb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ChunkFb<'a> {
  pub const VT_HASH: flatbuffers::VOffsetT = 4;
  pub const VT_SIZE_: flatbuffers::VOffsetT = 6;
  pub const VT_OFFSET: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ChunkFb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ChunkFbArgs<'args>
  ) -> flatbuffers::WIPOffset<ChunkFb<'bldr>> {
    let mut builder = ChunkFbBuilder::new(_fbb);
    builder.add_offset(args.offset);
    builder.add_size_(args.size_);
    if let Some(x) = args.hash { builder.add_hash(x); }
    builder.finish()
  }


  #[inline]
  pub fn hash(&self) -> Option<flatbuffers::Vector<'a, i8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(ChunkFb::VT_HASH, None)}
  }
  #[inline]
  pub fn size_(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ChunkFb::VT_SIZE_, Some(0)).unwrap()}
  }
  #[inline]
  pub fn offset(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(ChunkFb::VT_OFFSET, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for ChunkFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("hash", Self::VT_HASH, false)?
     .visit_field::<i64>("size_", Self::VT_SIZE_, false)?
     .visit_field::<i64>("offset", Self::VT_OFFSET, false)?
     .finish();
    Ok(())
  }
}
pub struct ChunkFbArgs<'a> {
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    pub size_: i64,
    pub offset: i64,
}
impl<'a> Default for ChunkFbArgs<'a> {
  #[inline]
  fn default() -> Self {
    ChunkFbArgs {
      hash: None,
      size_: 0,
      offset: 0,
    }
  }
}

pub struct ChunkFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ChunkFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ChunkFb::VT_HASH, hash);
  }
  #[inline]
  pub fn add_size_(&mut self, size_: i64) {
    self.fbb_.push_slot::<i64>(ChunkFb::VT_SIZE_, size_, 0);
  }
  #[inline]
  pub fn add_offset(&mut self, offset: i64) {
    self.fbb_.push_slot::<i64>(ChunkFb::VT_OFFSET, offset, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ChunkFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ChunkFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ChunkFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ChunkFb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ChunkFb");
      ds.field("hash", &self.hash());
      ds.field("size_", &self.size_());
      ds.field("offset", &self.offset());
      ds.finish()
  }
}
pub enum BundleFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct BundleFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for BundleFb<'a> {
  type Inner = BundleFb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> BundleFb<'a> {
  pub const VT_HASH: flatbuffers::VOffsetT = 4;
  pub const VT_CHUNKS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    BundleFb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BundleFbArgs<'args>
  ) -> flatbuffers::WIPOffset<BundleFb<'bldr>> {
    let mut builder = BundleFbBuilder::new(_fbb);
    if let Some(x) = args.chunks { builder.add_chunks(x); }
    if let Some(x) = args.hash { builder.add_hash(x); }
    builder.finish()
  }


  #[inline]
  pub fn hash(&self) -> Option<flatbuffers::Vector<'a, i8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(BundleFb::VT_HASH, None)}
  }
  #[inline]
  pub fn chunks(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb>>>>(BundleFb::VT_CHUNKS, None)}
  }
}

impl flatbuffers::Verifiable for BundleFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("hash", Self::VT_HASH, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<ChunkFb>>>>("chunks", Self::VT_CHUNKS, false)?
     .finish();
    Ok(())
  }
}
pub struct BundleFbArgs<'a> {
    pub hash: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
    pub chunks: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<ChunkFb<'a>>>>>,
}
impl<'a> Default for BundleFbArgs<'a> {
  #[inline]
  fn default() -> Self {
    BundleFbArgs {
      hash: None,
      chunks: None,
    }
  }
}

pub struct BundleFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BundleFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_hash(&mut self, hash: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BundleFb::VT_HASH, hash);
  }
  #[inline]
  pub fn add_chunks(&mut self, chunks: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<ChunkFb<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(BundleFb::VT_CHUNKS, chunks);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BundleFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BundleFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<BundleFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for BundleFb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("BundleFb");
      ds.field("hash", &self.hash());
      ds.field("chunks", &self.chunks());
      ds.finish()
  }
}
pub enum ManifestFbOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ManifestFb<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ManifestFb<'a> {
  type Inner = ManifestFb<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ManifestFb<'a> {
  pub const VT_FRAGMENTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ManifestFb { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ManifestFbArgs<'args>
  ) -> flatbuffers::WIPOffset<ManifestFb<'bldr>> {
    let mut builder = ManifestFbBuilder::new(_fbb);
    if let Some(x) = args.fragments { builder.add_fragments(x); }
    builder.finish()
  }


  #[inline]
  pub fn fragments(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FragmentFb<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FragmentFb>>>>(ManifestFb::VT_FRAGMENTS, None)}
  }
}

impl flatbuffers::Verifiable for ManifestFb<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FragmentFb>>>>("fragments", Self::VT_FRAGMENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct ManifestFbArgs<'a> {
    pub fragments: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FragmentFb<'a>>>>>,
}
impl<'a> Default for ManifestFbArgs<'a> {
  #[inline]
  fn default() -> Self {
    ManifestFbArgs {
      fragments: None,
    }
  }
}

pub struct ManifestFbBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ManifestFbBuilder<'a, 'b> {
  #[inline]
  pub fn add_fragments(&mut self, fragments: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FragmentFb<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ManifestFb::VT_FRAGMENTS, fragments);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ManifestFbBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ManifestFbBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ManifestFb<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ManifestFb<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ManifestFb");
      ds.field("fragments", &self.fragments());
      ds.finish()
  }
}
